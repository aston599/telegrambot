"""
üìã Modern Admin Sipari≈ü Y√∂netimi
Telegram uyumlu admin sipari≈ü onay/red sistemi
"""

import logging
from datetime import datetime
from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from database import get_db_pool

logger = logging.getLogger(__name__)

# Router olu≈ütur
router = Router()

# Admin sipari≈ü durumlarƒ± - Global olarak eri≈üilebilir
admin_order_states = {}

def get_admin_order_states():
    """Global admin_order_states'e eri≈üim"""
    return admin_order_states

# ==============================================
# KOMUT HANDLER'LARI
# ==============================================

@router.message(Command("siparisliste"))
async def siparis_liste_command(message: types.Message) -> None:
    """Sipari≈ü listesi komutu"""
    try:
        # Admin kontrol√º
        from config import get_config
        config = get_config()
        if message.from_user.id != config.ADMIN_USER_ID:
            return
        
        # Grup chatindeyse komut mesajƒ±nƒ± sil
        if message.chat.type != "private":
            try:
                await message.delete()
                logger.info(f"üîá Sipari≈ü listesi komutu mesajƒ± silindi - Group: {message.chat.id}")
            except Exception as e:
                logger.error(f"‚ùå Sipari≈ü listesi mesajƒ± silinemedi: {e}")
            return
        
        await show_orders_list_modern(message)
        
    except Exception as e:
        logger.error(f"‚ùå Sipari≈ü listesi komutu hatasƒ±: {e}")
        await message.reply("‚ùå Sipari≈ü listesi y√ºklenemedi!")

@router.message(Command("siparisonayla"))
async def siparis_onayla_command(message: types.Message) -> None:
    """Sipari≈ü onaylama komutu"""
    try:
        # Admin kontrol√º
        from config import get_config
        config = get_config()
        if message.from_user.id != config.ADMIN_USER_ID:
            return
        
        # Grup chatindeyse komut mesajƒ±nƒ± sil
        if message.chat.type != "private":
            try:
                await message.delete()
                logger.info(f"üîá Sipari≈ü onaylama komutu mesajƒ± silindi - Group: {message.chat.id}")
            except Exception as e:
                logger.error(f"‚ùå Sipari≈ü onaylama mesajƒ± silinemedi: {e}")
            return
        
        # Sipari≈ü listesini g√∂ster
        await show_orders_list_modern(message)
        
    except Exception as e:
        logger.error(f"‚ùå Sipari≈ü onaylama komutu hatasƒ±: {e}")
        await message.reply("‚ùå Sipari≈ü onaylama sistemi y√ºklenemedi!")

# ==============================================
# CALLBACK HANDLER'LARI
# ==============================================

@router.callback_query(F.data.startswith("admin_approve_"))
async def admin_approve_callback(callback: types.CallbackQuery) -> None:
    """Admin sipari≈ü onaylama callback'i"""
    try:
        order_number = callback.data.replace("admin_approve_", "")
        await handle_admin_approve_order(callback, order_number)
    except Exception as e:
        logger.error(f"‚ùå Admin onay callback hatasƒ±: {e}")
        await callback.answer("‚ùå Onay i≈ülemi ba≈üarƒ±sƒ±z!", show_alert=True)

@router.callback_query(F.data.startswith("admin_reject_"))
async def admin_reject_callback(callback: types.CallbackQuery) -> None:
    """Admin sipari≈ü reddetme callback'i"""
    try:
        order_number = callback.data.replace("admin_reject_", "")
        await handle_admin_reject_order(callback, order_number)
    except Exception as e:
        logger.error(f"‚ùå Admin red callback hatasƒ±: {e}")
        await callback.answer("‚ùå Red i≈ülemi ba≈üarƒ±sƒ±z!", show_alert=True)

@router.callback_query(F.data == "admin_orders_list")
async def admin_orders_list_callback(callback: types.CallbackQuery) -> None:
    """Admin sipari≈ü listesi callback'i"""
    try:
        # Callback'i message'a √ßevir
        class MessageWrapper:
            def __init__(self, callback):
                self.callback = callback
                self.chat = callback.message.chat
                self.from_user = callback.from_user
                self.reply = callback.message.answer
                self.answer = callback.message.answer
                
        message_wrapper = MessageWrapper(callback)
        await show_orders_list_modern(message_wrapper)
        await callback.answer("üìã Sipari≈ü listesi g√ºncellendi!")
        
    except Exception as e:
        logger.error(f"‚ùå Admin sipari≈ü listesi callback hatasƒ±: {e}")
        await callback.answer("‚ùå Sipari≈ü listesi y√ºklenemedi!", show_alert=True)

# ==============================================
# MESAJ HANDLER'LARI
# ==============================================

@router.message(F.chat.type == "private")
async def admin_order_message_handler(message: types.Message) -> None:
    """Admin'in sipari≈ü onay/red mesajƒ±nƒ± yakala"""
    try:
        await handle_admin_order_message(message)
    except Exception as e:
        logger.error(f"‚ùå Admin sipari≈ü mesaj handler hatasƒ±: {e}")

# ==============================================
# MEVCUT FONKSƒ∞YONLAR
# ==============================================

async def show_orders_list_modern(message: types.Message) -> None:
    """Modern sipari≈ü listesi g√∂ster"""
    try:
        # Yeni SQL fonksiyonunu kullan
        from database import get_pending_orders_with_details
        orders = await get_pending_orders_with_details()
        
        if not orders:
            await message.reply(
                "üìã **Sipari≈ü Listesi**\n\n"
                "‚è≥ Bekleyen sipari≈ü bulunmuyor.\n"
                "T√ºm sipari≈üler i≈ülenmi≈ü durumda.",
                parse_mode="Markdown"
            )
            return
        
        # Her sipari≈ü i√ßin ayrƒ± mesaj
        for order in orders:
            order_date = order['created_at'].strftime('%d.%m.%Y %H:%M')
            
            order_message = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üì¶ Sƒ∞PARƒ∞≈û DETAYI üì¶      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã **Sipari≈ü Bilgileri:**
üÜî **Sipari≈ü No:** `{order['order_number']}`
üë§ **M√º≈üteri:** {order['first_name']} (@{order['username']})
üõçÔ∏è **√úr√ºn:** {order['product_name']}
üè¢ **Site:** {order['company_name']}
üí∞ **Tutar:** {order['total_price']} KP
üìÖ **Tarih:** {order_date}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚è≥ **Durum:** Bekliyor
üîß **ƒ∞≈ülem:** Onay/Red bekleniyor
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ Onayla", callback_data=f"admin_approve_{order['order_number']}"),
                    InlineKeyboardButton(text="‚ùå Reddet", callback_data=f"admin_reject_{order['order_number']}")
                ]
            ])
            
            await message.answer(
                order_message,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        
        # √ñzet mesajƒ±
        await message.reply(
            f"üìã **Sipari≈ü √ñzeti**\n\n"
            f"‚è≥ **Bekleyen Sipari≈ü:** {len(orders)} adet\n"
            f"üìÖ **Son G√ºncelleme:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"Her sipari≈ü i√ßin onay/red butonlarƒ±nƒ± kullanƒ±n.",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"‚ùå Sipari≈ü listesi hatasƒ±: {e}")
        await message.reply("‚ùå Sipari≈üler y√ºklenemedi!")


async def handle_admin_approve_order(callback: types.CallbackQuery, order_number: str) -> None:
    """Admin sipari≈ü onaylama i≈ülemi"""
    try:
        user_id = callback.from_user.id
        
        logger.info(f"‚úÖ Admin onay butonu tƒ±klandƒ± - User: {user_id}, Order: {order_number}")
        
        # Admin kontrol√º
        from config import get_config, is_admin
        config = get_config()
        if not is_admin(user_id):
            await callback.answer("‚ùå Yetkiniz yok!", show_alert=True)
            return
        
        # Admin'i sipari≈ü durumuna al
        admin_order_states[user_id] = {
            'action': 'approve',
            'order_number': order_number,
            'timestamp': datetime.now()
        }
        
        logger.info(f"‚úÖ Admin sipari≈ü durumuna alƒ±ndƒ± - User: {user_id}, States: {admin_order_states}")
        
        # Onay mesajƒ± formu
        approve_message = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        ‚úÖ Sƒ∞PARƒ∞≈û ONAY FORMU ‚úÖ        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã **Sipari≈ü No:** `{order_number}`

üìù **Onay mesajƒ±nƒ±zƒ± yazƒ±n:**
‚Ä¢ Kod bilgileri
‚Ä¢ Teslimat detaylarƒ±
‚Ä¢ √ñzel talimatlar
‚Ä¢ Diƒüer bilgiler

üí° **√ñrnek:** "Kodunuz: ABC123, Siteye giri≈ü yapƒ±p kodu kullanƒ±n"

‚ö†Ô∏è **√ñnemli:** Mesajƒ±nƒ±z m√º≈üteriye g√∂nderilecek
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        await callback.message.edit_text(
            approve_message,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        await callback.answer("üìù Onay mesajƒ±nƒ±zƒ± yazƒ±n...")
        
    except Exception as e:
        logger.error(f"‚ùå Admin onay hatasƒ±: {e}")
        await callback.answer("‚ùå Onay i≈ülemi ba≈üarƒ±sƒ±z!", show_alert=True)


async def handle_admin_reject_order(callback: types.CallbackQuery, order_number: str) -> None:
    """Admin sipari≈ü reddetme i≈ülemi"""
    try:
        user_id = callback.from_user.id
        
        logger.info(f"‚ùå Admin red butonu tƒ±klandƒ± - User: {user_id}, Order: {order_number}")
        
        # Admin kontrol√º
        from config import get_config, is_admin
        config = get_config()
        if not is_admin(user_id):
            await callback.answer("‚ùå Yetkiniz yok!", show_alert=True)
            return
        
        # Admin'i sipari≈ü durumuna al
        admin_order_states[user_id] = {
            'action': 'reject',
            'order_number': order_number,
            'timestamp': datetime.now()
        }
        
        logger.info(f"‚ùå Admin sipari≈ü durumuna alƒ±ndƒ± - User: {user_id}, States: {admin_order_states}")
        
        # Red mesajƒ± formu
        reject_message = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        ‚ùå Sƒ∞PARƒ∞≈û RED FORMU ‚ùå        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã **Sipari≈ü No:** `{order_number}`

üìù **Red sebebini yazƒ±n:**
‚Ä¢ Neden reddedildi
‚Ä¢ Alternatif √∂neriler
‚Ä¢ Tekrar sipari≈ü bilgileri
‚Ä¢ Diƒüer a√ßƒ±klamalar

üí° **√ñrnek:** "Site kayƒ±t olmadƒ±ƒüƒ±nƒ±z i√ßin reddedildi. √ñnce kayƒ±t olun."

‚ö†Ô∏è **√ñnemli:** Mesajƒ±nƒ±z m√º≈üteriye g√∂nderilecek
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        await callback.message.edit_text(
            reject_message,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        await callback.answer("üìù Red sebebini yazƒ±n...")
        
    except Exception as e:
        logger.error(f"‚ùå Admin red hatasƒ±: {e}")
        await callback.answer("‚ùå Red i≈ülemi ba≈üarƒ±sƒ±z!", show_alert=True)


async def handle_admin_order_message(message: types.Message) -> None:
    """Admin'in sipari≈ü onay/red mesajƒ±nƒ± i≈üle"""
    try:
        user_id = message.from_user.id
        from config import get_config
        config = get_config()
        
        # Admin kontrol√º
        if user_id != config.ADMIN_USER_ID:
            return
        
        # Admin'in sipari≈ü durumu var mƒ±?
        if user_id not in admin_order_states:
            # Eƒüer admin sipari≈ü durumunda deƒüilse, diƒüer handler'lara ge√ß
            logger.debug(f"‚ùå Admin sipari≈ü durumunda deƒüil - User: {user_id}")
            return
        
        # Debug log
        logger.info(f"üìù Admin sipari≈ü mesajƒ± alƒ±ndƒ± - User: {user_id}, Text: {message.text[:50]}...")
        logger.info(f"üìù Admin order states: {admin_order_states}")
        
        state = admin_order_states[user_id]
        action = state['action']
        order_number = state['order_number']
        admin_message = message.text
        
        # Mesajƒ± i≈ülemeden √∂nce state'i temizle
        del admin_order_states[user_id]
        
        logger.info(f"üìù Sipari≈ü i≈ülemi ba≈ülatƒ±lƒ±yor - Action: {action}, Order: {order_number}")
        
        pool = await get_db_pool()
        if not pool:
            await message.reply("‚ùå Sipari≈ü i≈ülemi ba≈üarƒ±sƒ±z!")
            return
        
        async with pool.acquire() as conn:
            # Sipari≈ü bilgilerini al
            order_info = await conn.fetchrow("""
                SELECT o.user_id, o.total_price, o.status,
                       p.name as product_name, p.company_name,
                       u.first_name, u.username
                FROM market_orders o
                JOIN market_products p ON o.product_id = p.id
                JOIN users u ON o.user_id = u.user_id
                WHERE o.order_number = $1
            """, order_number)
            
            if not order_info:
                await message.reply("‚ùå Sipari≈ü bulunamadƒ±!")
                return
            
            logger.info(f"üìù Sipari≈ü bilgileri alƒ±ndƒ± - User: {order_info['user_id']}, Product: {order_info['product_name']}")
            
            if action == 'approve':
                # Sipari≈üi onayla
                await conn.execute("""
                    UPDATE market_orders 
                    SET status = 'approved', admin_notes = $1, updated_at = NOW()
                    WHERE order_number = $2
                """, admin_message, order_number)
                
                logger.info(f"‚úÖ Sipari≈ü onaylandƒ± - Order: {order_number}")
                
                # M√º≈üteriye onay mesajƒ± g√∂nder
                customer_message = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        ‚úÖ Sƒ∞PARƒ∞≈ûƒ∞Nƒ∞Z ONAYLANDI ‚úÖ        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã **Sipari≈ü No:** `{order_number}`
üõçÔ∏è **√úr√ºn:** {order_info['product_name']}
üè¢ **Site:** {order_info['company_name']}
üí∞ **Tutar:** {order_info['total_price']} KP

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üì¶ **Teslimat Bilgileri:**
{admin_message}

‚úÖ **Sipari≈üiniz onaylandƒ±!**
                """
                
                from aiogram import Bot
                bot = Bot(token=config.BOT_TOKEN)
                
                await bot.send_message(
                    chat_id=order_info['user_id'],
                    text=customer_message,
                    parse_mode="Markdown"
                )
                
                logger.info(f"‚úÖ M√º≈üteriye onay mesajƒ± g√∂nderildi - User: {order_info['user_id']}")
                
                # Admin'e onay mesajƒ±
                await message.reply("‚úÖ Sipari≈ü onaylandƒ± ve m√º≈üteriye bildirim g√∂nderildi!")
                
                # Log dosyasƒ±na kaydet
                with open("sipariskabullog.txt", "a", encoding="utf-8") as f:
                    f.write(f"{datetime.now()} - Sipari≈ü onaylandƒ±: {order_number} - Admin: {user_id} - Mesaj: {admin_message}\n")
                
            elif action == 'reject':
                # Sipari≈üi reddet
                await conn.execute("""
                    UPDATE market_orders 
                    SET status = 'rejected', admin_notes = $1, updated_at = NOW()
                    WHERE order_number = $2
                """, admin_message, order_number)
                
                logger.info(f"‚ùå Sipari≈ü reddedildi - Order: {order_number}")
                
                # BAKƒ∞YE ƒ∞ADE Sƒ∞STEMƒ∞ - Kullanƒ±cƒ±nƒ±n parasƒ±nƒ± geri ver
                refund_amount = order_info['total_price']
                await conn.execute("""
                    UPDATE users 
                    SET kirve_points = kirve_points + $1 
                    WHERE user_id = $2
                """, refund_amount, order_info['user_id'])
                
                logger.info(f"üí∞ Bakiye iade edildi - User: {order_info['user_id']}, Amount: {refund_amount} KP")
                
                # M√º≈üteriye red mesajƒ± g√∂nder
                customer_message = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        ‚ùå Sƒ∞PARƒ∞≈ûƒ∞Nƒ∞Z REDDEDƒ∞LDƒ∞ ‚ùå        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã **Sipari≈ü No:** `{order_number}`
üõçÔ∏è **√úr√ºn:** {order_info['product_name']}
üè¢ **Site:** {order_info['company_name']}
üí∞ **Tutar:** {order_info['total_price']} KP

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ùå **Red Sebebi:**
{admin_message}

üí∞ **Bakiye ƒ∞adesi:**
‚úÖ {refund_amount} KP hesabƒ±nƒ±za iade edildi
üíé Yeni bakiyenizi `/menu` komutu ile kontrol edebilirsiniz

üí° **√ñneriler:**
‚Ä¢ Gerekli ko≈üullarƒ± saƒülayƒ±n
‚Ä¢ Tekrar sipari≈ü verebilirsiniz
‚Ä¢ Sorularƒ±nƒ±z i√ßin destek alƒ±n

‚ùå **Sipari≈üiniz reddedildi.**
                """
                
                from aiogram import Bot
                bot = Bot(token=config.BOT_TOKEN)
                
                await bot.send_message(
                    chat_id=order_info['user_id'],
                    text=customer_message,
                    parse_mode="Markdown"
                )
                
                logger.info(f"‚ùå M√º≈üteriye red mesajƒ± g√∂nderildi - User: {order_info['user_id']}")
                
                # Admin'e red mesajƒ±
                await message.reply(f"‚ùå Sipari≈ü reddedildi ve m√º≈üteriye {refund_amount} KP iade edildi!")
                
                # Log dosyasƒ±na kaydet
                with open("siparisredlog.txt", "a", encoding="utf-8") as f:
                    f.write(f"{datetime.now()} - Sipari≈ü reddedildi: {order_number} - Admin: {user_id} - Sebep: {admin_message} - ƒ∞ade: {refund_amount} KP\n")
        
    except Exception as e:
        logger.error(f"‚ùå Admin sipari≈ü mesaj i≈üleme hatasƒ±: {e}")
        await message.reply("‚ùå Sipari≈ü i≈ülemi ba≈üarƒ±sƒ±z!")


async def handle_admin_order_cancel(callback: types.CallbackQuery) -> None:
    """Admin sipari≈ü i≈ülemini iptal et"""
    try:
        user_id = callback.from_user.id
        
        # Admin kontrol√º
        from config import get_config
        config = get_config()
        if user_id != config.ADMIN_USER_ID:
            await callback.answer("‚ùå Yetkiniz yok!", show_alert=True)
            return
        
        # State'i temizle
        if user_id in admin_order_states:
            del admin_order_states[user_id]
        
        await callback.message.edit_text(
            "‚ùå **Sipari≈ü ƒ∞≈ülemi ƒ∞ptal Edildi**\n\n"
            "Sipari≈ü i≈ülemi iptal edildi.\n"
            "Yeni bir i≈ülem ba≈ülatabilirsiniz.",
            parse_mode="Markdown"
        )
        
        await callback.answer("‚ùå ƒ∞≈ülem iptal edildi!")
        
    except Exception as e:
        logger.error(f"‚ùå Admin iptal hatasƒ±: {e}")
        await callback.answer("‚ùå ƒ∞ptal i≈ülemi ba≈üarƒ±sƒ±z!", show_alert=True) 