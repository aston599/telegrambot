"""
Profil handler - Kullanici profil sistemi
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import get_user_points, get_user_rank, get_today_stats, get_market_history, get_system_stats
from utils.logger import logger

async def menu_command(message: types.Message) -> None:
    """
    /menu komutu - Kullanici profil menusu
    """
    try:
        user = message.from_user
        
        # Kullanici kayitli mi kontrol et
        from database import is_user_registered
        if not await is_user_registered(user.id):
            await message.answer(
                "Henuz kayit olmadƒ±nƒ±z!\n"
                "Kayit olmak icin /kirvekayit komutunu kullanƒ±n.",
                reply_to_message_id=message.message_id
            )
            return
        
        logger.info(f"/menu komutu - User: {user.first_name} ({user.id})")
        
        # Kullanici verilerini al
        user_points = await get_user_points(user.id)
        user_rank = await get_user_rank(user.id)
        today_stats = await get_today_stats(user.id)
        market_history = await get_market_history(user.id)
        system_stats = await get_system_stats()
        
        # Profil butonlarƒ±
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä Detaylƒ± ƒ∞statistikler", callback_data="profile_detailed"),
                InlineKeyboardButton(text="üèÜ Sƒ±ralama", callback_data="profile_ranking")
            ],
            [
                InlineKeyboardButton(text="üõí Market", callback_data="profile_market"),
                InlineKeyboardButton(text="üì¶ Sipari≈ülerim", callback_data="my_orders")
            ]
        ])
        
        # Ana profil mesajƒ±
        profile_response = f"""
**{user.first_name}'IN PROFƒ∞Lƒ∞**

**üíé POINT DURUMU**

**üí∞ Toplam Point:** `{user_points.get('kirve_points', 0):.2f} KP`

**üèÜ R√úTBE Bƒ∞LGƒ∞LERƒ∞**

**üëë R√ºtbe:** {user_rank.get('rank_name', '√úye')}
**‚≠ê Seviye:** {user_rank.get('rank_level', 1)}

**üìä AKTƒ∞Vƒ∞TE ƒ∞STATƒ∞STƒ∞KLERƒ∞**

**üí¨ Toplam Mesaj:** {user_points.get('total_messages', 0)}
**üìÖ Bug√ºnk√º Mesaj:** {today_stats.get('message_count', 0)}
**‚è∞ Son Aktivite:** {today_stats.get('last_activity', 'Bilinmiyor')}

**üõí MARKET GE√áMƒ∞≈ûƒ∞**

**üì¶ Toplam Sipari≈ü:** {market_history.get('total_orders', 0)} adet
**üí∏ Toplam Harcama:** {market_history.get('total_spent', 0):.2f} KP
**‚úÖ Onaylanan Sipari≈ü:** {market_history.get('approved_orders', 0)} adet
**üìã Son Sipari≈ü:** {market_history.get('last_order_date', 'Hi√ß sipari≈ü yok')}

**üîß Sƒ∞STEM DURUMU**

**üë• Toplam √úye:** {system_stats.get('total_users', 0)}
**üìù Kayƒ±tlƒ±:** {system_stats.get('registered_users', 0)}
**üè† Aktif Grup:** {system_stats.get('active_groups', 0)}

---
_Profilinizi geli≈ütirmek i√ßin grup sohbetlerine katƒ±lƒ±n!_
        """
        
        await message.answer(
            profile_response,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        logger.info(f"Profil men√ºs√º g√∂sterildi - User: {user.id}")
        
    except Exception as e:
        logger.error(f"/menu handler hatasƒ±: {e}")
        await message.answer(
            "Profil bilgileri y√ºklenirken hata olu≈ütu!\n"
            "L√ºtfen daha sonra tekrar deneyin.",
            reply_to_message_id=message.message_id
        )


async def profile_callback_handler(callback: types.CallbackQuery) -> None:
    """
    Profil men√ºs√º callback'lerini i≈üle
    """
    try:
        user = callback.from_user
        data = callback.data
        
        # Rate limiting - callback spam √∂nlemi
        from utils.rate_limiter import rate_limiter
        await rate_limiter.wait_if_needed(user.id, "callback")
        
        # Memory management - cache kontrol√º
        from utils.memory_manager import memory_manager
        cache_key = f"profile_callback_{user.id}_{data}"
        cached_result = memory_manager.get_cache_manager().get_cache(cache_key)
        if cached_result:
            logger.info(f"Cache hit - User: {user.id}, Data: {data}")
            return
        
        logger.info(f"Profil callback - User: {user.first_name} ({user.id}) - Data: {data}")
        
        # Hƒ±zlƒ± response - timeout √∂nlemi (en ba≈üta)
        try:
            await callback.answer()
        except Exception as answer_error:
            logger.warning(f"Callback answer hatasƒ±: {answer_error}")
            # Answer ba≈üarƒ±sƒ±z olsa bile devam et
        
        if data == "profile_detailed":
            await show_detailed_stats(callback)
        elif data == "profile_ranking":
            await show_ranking(callback)
        elif data == "profile_market":
            await show_market_menu(callback)
        elif data.startswith("view_product_"):
            logger.info(f"VIEW PRODUCT CALLBACK - Data: {data}")
            from handlers.market_system import show_product_details_modern
            await show_product_details_modern(callback, data)
        elif data.startswith("buy_product_"):
            from handlers.market_system import handle_buy_product_modern
            await handle_buy_product_modern(callback, data)
        elif data.startswith("confirm_buy_"):
            from handlers.market_system import confirm_buy_product_modern
            await confirm_buy_product_modern(callback, data)
        elif data == "my_orders":
            logger.info(f"Sipari≈ülerim butonu tƒ±klandƒ± - User: {callback.from_user.id}")
            from handlers.market_system import show_my_orders
            await show_my_orders(callback)
        elif data == "profile_orders":
            logger.info(f"Profil sipari≈ülerim butonu tƒ±klandƒ± - User: {callback.from_user.id}")
            from handlers.market_system import show_my_orders
            await show_my_orders(callback)
        elif data == "profile_back":
            logger.info(f"Profil geri butonu tƒ±klandƒ± - User: {callback.from_user.id}")
            await menu_command(callback.message)
        elif data == "insufficient_balance":
            # Alert g√∂sterme, sadece log yaz
            logger.warning(f"Yetersiz bakiye - User: {user.id}")
            await callback.answer("Yetersiz bakiye!", show_alert=True)
        else:
            logger.warning(f"Bilinmeyen profil callback: {data}")
            await callback.answer("Bilinmeyen i≈ülem!", show_alert=True)
            
    except Exception as e:
        logger.error(f"Profile callback handler hatasƒ±: {e}")
        try:
            await callback.answer("ƒ∞≈ülem sƒ±rasƒ±nda hata olu≈ütu!", show_alert=True)
        except:
            pass


async def show_detailed_stats(callback: types.CallbackQuery) -> None:
    """Detaylƒ± istatistikler g√∂ster"""
    try:
        user = callback.from_user
        
        # Detaylƒ± veriler
        user_points = await get_user_points(user.id)
        today_stats = await get_today_stats(user.id)
        weekly_stats = await get_weekly_stats(user.id)
        
        response = f"""
**üìä DETAYLI ƒ∞STATƒ∞STƒ∞KLER**

**üíé POINT DETAYLARI**
**üí∞ Toplam Point:** `{user_points.get('kirve_points', 0):.2f} KP`
**üìÖ G√ºnl√ºk Kazanƒ±m:** `{user_points.get('daily_points', 0):.2f} KP`
**üìä Haftalƒ±k Kazanƒ±m:** `{weekly_stats.get('weekly_points', 0):.2f} KP`

**üí¨ MESAJ ƒ∞STATƒ∞STƒ∞KLERƒ∞**
**üìù Toplam Mesaj:** {user_points.get('total_messages', 0)}
**üìÖ Bug√ºnk√º Mesaj:** {today_stats.get('message_count', 0)}
**üìä Bu Hafta:** {weekly_stats.get('weekly_messages', 0)}

**‚è∞ ZAMAN Bƒ∞LGƒ∞LERƒ∞**
**üìÖ Kayƒ±t Tarihi:** {user_points.get('registration_date', 'Bilinmiyor')}
**üïê Son Aktivite:** {today_stats.get('last_activity', 'Bilinmiyor')}
**‚è±Ô∏è Aktif S√ºre:** {today_stats.get('active_duration', 'Bilinmiyor')}
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è Ana Men√ºye D√∂n", callback_data="profile_back")]
        ])
        
        await callback.message.edit_text(
            response,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Detaylƒ± stats hatasƒ±: {e}")
        await callback.answer("ƒ∞statistikler y√ºklenirken hata olu≈ütu!", show_alert=True)


async def show_ranking(callback: types.CallbackQuery) -> None:
    """Sƒ±ralama g√∂ster"""
    try:
        user = callback.from_user
        
        # Sƒ±ralama verileri
        ranking_data = await get_user_ranking(user.id)
        
        response = f"""
**üèÜ SIRALAMA DURUMU**

**üë§ SENƒ∞N DURUMUN**
**üåç Genel Sƒ±ralama:** #{ranking_data.get('global_rank', 'N/A')}
**üí∞ Point Sƒ±ralamasƒ±:** #{ranking_data.get('point_rank', 'N/A')}
**üí¨ Mesaj Sƒ±ralamasƒ±:** #{ranking_data.get('message_rank', 'N/A')}

**üìä DETAYLAR**
**üéØ En Yakƒ±n Rakip:** {ranking_data.get('next_competitor', 'Yok')}
**üìà Bir √úst Sƒ±ra ƒ∞√ßin:** {ranking_data.get('points_needed', 0):.2f} KP gerekli
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è Ana Men√ºye D√∂n", callback_data="profile_back")]
        ])
        
        await callback.message.edit_text(
            response,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Ranking hatasƒ±: {e}")
        await callback.answer("Sƒ±ralama bilgileri y√ºklenirken hata olu≈ütu!", show_alert=True)


async def show_market_menu(callback: types.CallbackQuery) -> None:
    """Market men√ºs√º g√∂ster"""
    try:
        from handlers.market_system import show_market_menu_modern
        await show_market_menu_modern(callback)
        
    except Exception as e:
        logger.error(f"Market men√º hatasƒ±: {e}")
        await callback.answer("Market men√ºs√º y√ºklenirken hata olu≈ütu!", show_alert=True)


# Yardƒ±mcƒ± fonksiyonlar
async def get_weekly_stats(user_id: int) -> Dict[str, Any]:
    """Haftalƒ±k istatistikler"""
    try:
        # Bu fonksiyon database.py'de implement edilmeli
        return {
            'weekly_points': 0.0,
            'weekly_messages': 0
        }
    except Exception as e:
        logger.error(f"Weekly stats hatasƒ±: {e}")
        return {'weekly_points': 0.0, 'weekly_messages': 0}


async def get_user_ranking(user_id: int) -> Dict[str, Any]:
    """Kullanƒ±cƒ± sƒ±ralama bilgileri"""
    try:
        # Bu fonksiyon database.py'de implement edilmeli
        return {
            'global_rank': 'N/A',
            'point_rank': 'N/A', 
            'message_rank': 'N/A',
            'next_competitor': 'Yok',
            'points_needed': 0.0
        }
    except Exception as e:
        logger.error(f"Ranking hatasƒ±: {e}")
        return {
            'global_rank': 'N/A',
            'point_rank': 'N/A',
            'message_rank': 'N/A', 
            'next_competitor': 'Yok',
            'points_needed': 0.0
        } 