"""
üìù Logging Sistemi - Optimized for Production
"""

import logging
import os
import sys
from datetime import datetime
from logging.handlers import RotatingFileHandler

# Global logger instance
logger = logging.getLogger(__name__)

def setup_logger():
    """Logger'ƒ± kur"""
    # Production i√ßin log seviyesini ayarla - Daha az log
    log_level = logging.INFO  # WARNING yerine INFO - Bot √ßalƒ±≈ütƒ±ƒüƒ±nƒ± g√∂rmek i√ßin
    
    # Logger'ƒ± yapƒ±landƒ±r
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('bot.log', encoding='utf-8')
        ]
    )
    
    return logging.getLogger(__name__)

# Production'da sadece √∂nemli loglar - Emoji'siz versiyon
def log_important(message: str, level: str = "INFO"):
    """Sadece √∂nemli loglarƒ± console'a yazdƒ±r - Emoji'siz"""
    logger = logging.getLogger(__name__)
    
    # Emoji'leri kaldƒ±r (Windows uyumluluƒüu i√ßin)
    clean_message = message
    emoji_chars = ['ü§ñ', '‚úÖ', '‚ùå', '‚ö†Ô∏è', 'üéØ', 'üßπ', 'üë§', 'üéâ', '‚èπÔ∏è', 'üì¢', 'üîî', 'üì¨', 'üõçÔ∏è', 'üíé', 'üõ°Ô∏è', 'üö®', '‚è±Ô∏è', 'üóÑÔ∏è', 'üîç']
    for emoji in emoji_chars:
        clean_message = clean_message.replace(emoji, '')
    
    # Ba≈üƒ±ndaki bo≈üluklarƒ± temizle
    clean_message = clean_message.strip()
    
    try:
        if level == "ERROR":
            logger.error(clean_message)
        elif level == "WARNING":
            logger.warning(clean_message)
        else:
            logger.info(clean_message)
    except Exception as e:
        # Console buffer sorunu varsa sadece file'a yaz
        print(f"LOGGING ERROR: {e} - Message: {clean_message}")

def log_order_approval(order_id: int, order_number: str, user_id: int, username: str, 
                      product_name: str, company_name: str, amount: float, admin_message: str):
    """Sipari≈ü onaylama logu - √ñnemli i≈ülem"""
    log_important(f"SIPARIS ONAYLANDI - Order: {order_number}, User: {username}, Product: {product_name}, Amount: {amount} KP")

def log_order_rejection(order_id: int, order_number: str, user_id: int, username: str,
                       product_name: str, company_name: str, amount: float, admin_message: str):
    """Sipari≈ü reddetme logu - √ñnemli i≈ülem"""
    log_important(f"SIPARIS REDDEDILDI - Order: {order_number}, User: {username}, Product: {product_name}, Amount: {amount} KP")

def log_market_purchase(order_number: str, user_id: int, product_name: str, amount: float):
    """Market satƒ±n alma logu - √ñnemli i≈ülem"""
    log_important(f"MARKET SATIS - Order: {order_number}, User: {user_id}, Product: {product_name}, Amount: {amount} KP")

def log_point_earned(user_id: int, points: float, total_points: float):
    """Point kazanma logu - Sadece √∂nemli durumlar"""
    if points >= 1.0:  # 1 KP ve √ºst√º i√ßin log
        log_important(f"POINT KAZANIMI - User: {user_id}, Earned: {points} KP, Total: {total_points} KP")

def log_admin_action(admin_id: int, action: str, details: str):
    """Admin i≈ülem logu - √ñnemli i≈ülemler"""
    log_important(f"ADMIN ISLEM - Admin: {admin_id}, Action: {action}, Details: {details}")

def log_system_error(error: str, context: str = ""):
    """Sistem hatasƒ± logu - Kritik"""
    log_important(f"SISTEM HATASI - Error: {error}, Context: {context}", "ERROR")

def log_performance(operation: str, duration: float):
    """Performans logu - Sadece yava≈ü i≈ülemler"""
    if duration > 1.0:  # 1 saniyeden uzun i≈ülemler
        log_important(f"PERFORMANS - Operation: {operation}, Duration: {duration:.2f}s", "WARNING") 